BUGLOG:

Checkpoint 1:

1) system crashed
	Problem: IDT entries were set to absent
	Fix: we set the IDT entries to present

2) system crashed when we included paging.h in kernel.c
	Problem: we accessed the wrong memory location for initializing the page for video memory
	Fix: changed VIDEO_MEM from 0xB8 to 0xB8000

3) RTC not working
	Problem: IDT was not set properly
	Fix: added .size and .reserved4

4) interrupt wrapper would crash during iret
	Problem: stack was unbalanced
	Fix: instead of manually pushing all registers in the common_interrupt we added a pushal in each individual interrupt handler

Checkpoint 2:

1) keyboard interrupts were not going through
	Problem: keyboard was not connected to IDT or PIC
	Fix: connected the keyboard to the IDT, then re-wrote the PIC
		 enable_irq and disable_irq as it was hard-coded for the RTC only

2) buffer was adding double characters (ex. hheelllloo)
	Problem: buffer was taking in characters with both the press and release
	Fix: removed duplicate code which added characters into the buffer, and added an if check for the scancodes before we added it in the buffer

3) buffer was incorrect after we backspaced (it added \00), and after we hit enter, the backspace was still going to the previous line
	Problem: indexing issue
	Fix: fixed the indexing issue

4) page faulting every time I accessed the boot_block
	Problem: the FILESYS_ADDR was hardcoded
	Fix: created a global variable and initialized it with mod->mod_start

5) page faulting while printing file_type or inode_num of dentry
	Problem: I used %s in a printf statement to print a uint32_t data type (file_type and inode_num)
	Fix: I changed it to %d

6) page faulting in read_data when I accessed the length or data_blocks of inode_ptr
	Problem: inode struct was not initialized correctly
	Fix: initialized inode_ptr->length and inode_ptr->data_blocks

7) page faulting while initializing the data_block_ptr
	Problem: was dereferencing the pointer in intialization
	Fix: did not dereference the address

8) page faulting in read_data memcpy
	Problem: data_block_ptr is out of bounds
	Fix: fixed how the inode and boot_block structs were set up, then fixed a data type error which was messing up my math to calculate the inode_ptr

9) the buffer is not getting filled after I call read_data
	Problem: indexing error in calculation of data_block_ptr
	Fix: fixed the indexing error

10) page faulting at the end of the filesys_file_content test
	Problem: nbytes > sizeof(buf)
	Fix: made the sizeof(buf) = nbytes

11) read_data printing garbage after nbytes of the file has been printed
	Problem: wasn't adding a '\0' character at the end of the buffer
	Fix: added the '\0' character

12) page faulting in read_dentry_by_name
	Problem: the fname being passed in was in single quotes and so was being interpreted as an address, which was out of bounds
	Fix: called the function with the fname in double quotes

Checkpoint 3:

1) page faulting before we reached execute
	Problem: we had a check for the length of the buffer in terminal_read which was unnecessary, causing it to fail
	Fix: removed the check

2) shell went into an infinite loop printing the prompt
	Problem: terminal_read returned the wrong value
	Fix: fixed the return value of terminal_read

3) page faulting in execute
	Problem: esp_value and eip_values were accessing the user memory instead of the virtual address
	Fix: made them access the correct addresses

4) page faulting in execute
	Problem: steps were out of order
	Fix: put the steps in order

5) page faulting at the fake IRET
	Problem: was pushing stuff onto the stack backwards
	Fix: pushed them in the correct order

6) for all commands the shell printed "not a command"
	Problem: command was not being read properly
	Fix: added a check for the '\0' character (earlier I checked only for a space)

7) processes were not halting properly
	Problem: I closed the fd's of the current process instead of the parent process on accident
	Fix: closed the fd's of the parent process instead

8) process number was incorrect
	Problem: I had called change_process with process_num++ in execute
	Fix: called it with process_num+1

9) parent process number being stored in the PCB was incorrect
	Problem: stored parent process number as uint32_t instead of int32_t (initial shell process has parent of -1)
	Fix: changed data type to int32_t

Checkpoint 4:

1) arguments not being read correctly into current_pcb struct
	Problem: indexing error
	Fix: fixed the indexing error

2) ls: page faulting
	Problem: didn't allocate memory for dentry (used dentry_t* instead of dentry_t) so stuff was getting overwritten in the function stack with a null address somewhere
	Fix: used dentry_t

3) hello: not entering after it says "Hello, person" (prompt is printed on the same line)
	Problem: we didn't append a '/n' at the end of the terminal buffer
	Fix: appended '/n'

4) ls: page faulting after printing verylargetextwithverylongname.t(Q)(smiley face)
	Problem: incorrectly handling verylargetextwithverylongname.txt
	Fix: indexing error in read_dentry_by_index

5) pingpong: not working 
	Problem: RTC interrupts were turned off, and scrolling was being called too frequently
	Fix: turned on RTC interrupts and added an else-if statement in putc to fix scrolling

6) cat: could not read arguments
	Problem: file_open initialized a dentry pointer instead of a dentry struct so it didn't get filled properly
	Fix: initialized a dentry struct in file_open

7) cat: could not read arguments
	Problem: getargs used memcpy instead of strncpy
	Fix: changed memcpy to strncpy

8) cat: program terminated abnormally
	Problem: we had a check for the length of the buffer in terminal_write which was unnecessary, causing it to fail
	Fix: removed the check

9) grep: going in an infinite loop after finding the first instance in a file
	Problem: file_read is not keeping track of the offset so I kept reading the first few bytes of the same file
	Fix: incremented the offset

10) syserr: failing Null pointer, Kernel pointer, err_vidmap
	Problem: hadn't written vidmap
	Fix: wrote vidmap

11) grep: printing each instance from a file 3-4 times
	Problem: issue in read_data: not keeping track of offset
	Fix: fixed edge cases with offset

	NEED TO BE FIXED:

12) page faulting or getting a general protection error when we fill up most of the buffer and press enter
	Problem: check for boundary conditions in the keyboard buffer
	Fix:

13) cat: pausing in infinite loop (waiting for user to press enter in terminal read) after printing 1024 bytes from large files
	Problem: ebp is not being restored to kernel (still in user space) and ebx also gets overwritten for the second call to read (fd = 0 so it goes into terminal read); possible stack corruption??? or should I save the ebp in the tss?????
	Fix:

14) fish: not working; just accepting keyboard interrupts to allow the user to type
	Problem: 
	Fix: 

